var crypto = require('crypto');

// larger numbers mean better security, less
var config = {
  // size of the generated hash
  hashBytes: 32,
  // larger salt means hashed passwords are more resistant to rainbow table, but
  // you get diminishing returns pretty fast
  saltBytes: 16,
  // more iterations means an attacker has to take longer to brute force an
  // individual password, so larger is better. however, larger also means longer
  // to hash the password. tune so that hashing the password takes about a
  // second
  iterations: 10000,
  // digest used to hash the password
  digest: 'sha512'
};

/**
 * Hash a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Returns a self-contained buffer which can be arbitrarily encoded for storage
 * that contains all the data needed to verify a password.
 *
 * @param {!String} password
 * @param {!function(?Error, ?Buffer=)} callback
 */
function hashPassword (password, callback) {
  return new Promise((resolve, reject) => {
    // generate a salt for pbkdf2
    crypto.randomBytes(config.saltBytes, function (err, salt) {
      if (err) {
        return reject(err);
      }

      crypto.pbkdf2(password, salt, config.iterations, config.hashBytes, config.digest,
        function (err, hash) {
          if (err) {
            return reject(err);
          }

          var combinedBuffer = Buffer.alloc(hash.length + salt.length + 8);

          // include the size of the salt so that we can, during verification,
          // figure out how much of the hash is salt
          combinedBuffer.writeUInt32BE(salt.length, 0, true);
          // similarly, include the iteration count
          combinedBuffer.writeUInt32BE(config.iterations, 4, true);

          salt.copy(combinedBuffer, 8);
          hash.copy(combinedBuffer, salt.length + 8);
          resolve(combinedBuffer.toString('base64'));
        });
    });
  });
}

/**
 * Verify a password using Node's asynchronous pbkdf2 (key derivation) function.
 *
 * Accepts a hash and salt generated by hashPassword, and returns whether the
 * hash matched the password (as a boolean).
 *
 * @param {!String} password
 * @param {!String} combinedString String containing hash and salt as generated by
 *   hashPassword.
 * @param {!function(?Error, !boolean)}
 */
function verifyPassword (password, combinedString) {
  return new Promise((resolve, reject) => {
    var combinedBuffer = Buffer.from(combinedString, 'base64');
    // extract the salt and hash from the combined buffer
    var saltBytes = combinedBuffer.readUInt32BE(0);
    var hashBytes = combinedBuffer.length - saltBytes - 8;
    var iterations = combinedBuffer.readUInt32BE(4);
    var salt = combinedBuffer.slice(8, saltBytes + 8);
    var hash = combinedBuffer.toString('base64', saltBytes + 8);

    // verify the salt and hash against the password
    crypto.pbkdf2(password, salt, iterations, hashBytes, config.digest,
      function (err, verify) {
        if (err) {
          return reject(err, false);
        }

        resolve(verify.toString('base64') === hash);
      });
  });
}

exports.hashPassword = hashPassword;
exports.verifyPassword = verifyPassword;
